// Generated by the nanorpc protobuf plugin.
// If you make any local change, they will be lost.
// source: ProtobufTestApp.Services

namespace ProtobufTestApp.Services
{
  using System;
  using Google.Protobuf;

  #region Interfaces

  public interface SettingsServiceInterface
  {
    SettingList Get(global::ClosetRpc.IServerContext context, SettingKeyList value);

    void Set(global::ClosetRpc.IServerContext context, SettingList value);
  }

  #endregion

  #region Stub classes

  public abstract class SettingsService_StubBase : global::ClosetRpc.IRpcService
  {
    public string Name
    {
      get
      {
        return "services.SettingsService";
      }
    }

    protected abstract SettingsServiceInterface Impl { get; }

    public void CallMethod(global::ClosetRpc.IServerContext context, global::ClosetRpc.IRpcCall rpcCall, global::ClosetRpc.IRpcResult rpcResult)
    {
      rpcResult.Status = global::ClosetRpc.RpcStatus.Succeeded;

      if (rpcCall.MethodName == "Get")
      {
        var input = new SettingKeyList();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        var result = this.Impl.Get(context, input);
        rpcResult.ResultData = result.ToByteArray();
      }
      else if (rpcCall.MethodName == "Set")
      {
        var input = new SettingList();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        this.Impl.Set(context, input);
      }
      else
      {
        rpcResult.Status = global::ClosetRpc.RpcStatus.UnknownMethod;
      }

      // TODO: Generate an exception handling code.
    }
  }

  public class SettingsService_Stub : SettingsService_StubBase
  {
    private readonly SettingsServiceInterface impl;

    public SettingsService_Stub(SettingsServiceInterface impl)
    {
      this.impl = impl;
    }

    protected override SettingsServiceInterface Impl
    {
      get
      {
        return this.impl;
      }
    }
  }

  public abstract class SettingsService_ServiceBase : SettingsService_StubBase, SettingsServiceInterface
  {
    protected override SettingsServiceInterface Impl
    {
      get
      {
        return this;
      }
    }

    public abstract SettingList Get(global::ClosetRpc.IServerContext context, SettingKeyList value);

    public abstract void Set(global::ClosetRpc.IServerContext context, SettingList value);
  }

  #endregion

  #region Proxy classes

  public class SettingsService_Proxy
  {
    private static readonly string ServiceName = "services.SettingsService";

    private readonly global::ClosetRpc.RpcClient client;

    public SettingsService_Proxy(global::ClosetRpc.RpcClient client)
    {
      this.client = client;
    }

    public SettingList Get(SettingKeyList value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = SettingsService_Proxy.ServiceName;
      call.MethodName = "Get";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new SettingList();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }

    public void Set(SettingList value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = SettingsService_Proxy.ServiceName;
      call.MethodName = "Set";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }
    }
  }

  #endregion

  #region Event proxy classes

  public class SettingsEvents_EventProxy
  {
    private static readonly string ServiceName = "services.SettingsEvents";

    public void Changed(global::ClosetRpc.IEventSource eventSource, SettingList value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = SettingsEvents_EventProxy.ServiceName;
      call.MethodName = "Changed";
      call.IsAsync = true;
      call.CallData = value.ToByteArray();
      eventSource.SendEvent(call);
    }
  }

  #endregion

  #region Event stub classes

  public interface SettingsEventsEventInterface
  {
    void OnChanged(SettingList value);
  }

  public abstract class SettingsEvents_EventStubBase : global::ClosetRpc.IEventHandler
  {
    public string Name
    {
      get
      {
        return "services.SettingsEvents";
      }
    }

    protected abstract SettingsEventsEventInterface Impl { get; }

    public void CallMethod(global::ClosetRpc.IRpcCall rpcCall)
    {
      if (rpcCall.MethodName == "Changed")
      {
        var input = new SettingList();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        this.Impl.OnChanged(input);
      }
      else
      {
        // TODO: Generate diagnostics?.
      }
    }
  }

  public class SettingsEvents_EventStub : SettingsEvents_EventStubBase
  {
    private readonly SettingsEventsEventInterface impl;

    public SettingsEvents_EventStub(SettingsEventsEventInterface impl)
    {
      this.impl = impl;
    }

    protected override SettingsEventsEventInterface Impl
    {
      get
      {
        return this.impl;
      }
    }
  }

  public abstract class SettingsEvents_Listener : SettingsEvents_EventStubBase, SettingsEventsEventInterface
  {
    protected override SettingsEventsEventInterface Impl
    {
      get
      {
        return this;
      }
    }

    public abstract void OnChanged(SettingList value);
  }

  public class SettingsEvents_Handler : SettingsEvents_EventStubBase
  {
    private readonly SettingsEventsEventInterface impl;

    public SettingsEvents_Handler()
    {
      this.impl = new EventInterfaceImpl(this);
    }

    public event EventHandler<SettingList> Changed;

    protected override SettingsEventsEventInterface Impl
    {
      get
      {
        return this.impl;
      }
    }

    private class EventInterfaceImpl : SettingsEventsEventInterface
    {
      private readonly SettingsEvents_Handler outer;

      public EventInterfaceImpl(SettingsEvents_Handler outer)
      {
        this.outer = outer;
      }

      public void OnChanged(SettingList value)
      {
        var handler = this.outer.Changed;
        if (handler != null)
        {
          handler(this, value);
        }
      }
    }
  }

  #endregion
}
