// Generated by the nanorpc protobuf plugin.
// If you make any local change, they will be lost.
// source: NanoMessanger

namespace NanoMessanger
{
  using System;
  using Google.Protobuf;
  using Google.Protobuf.WellKnownTypes;

  #region Interfaces

  public interface LoginServiceInterface
  {
    BoolValue Register(global::ClosetRpc.IServerContext context, RegistrationData value);

    SessionInfo Login(global::ClosetRpc.IServerContext context, AuthenticationData value);

    BoolValue Logout(global::ClosetRpc.IServerContext context);

    BoolValue ChangeAuthenticationInfo(global::ClosetRpc.IServerContext context, RegistrationData value);

    BoolValue Reconnect(global::ClosetRpc.IServerContext context, StringValue value);
  }

  public interface ContactListServiceInterface
  {
    ContactList SearchContact(global::ClosetRpc.IServerContext context, StringValue value);

    void AddContact(global::ClosetRpc.IServerContext context, ContactInfo value);

    void RemoveContact(global::ClosetRpc.IServerContext context, StringValue value);

    ContactInfo GetContacts(global::ClosetRpc.IServerContext context);
  }

  public interface MessengerServiceInterface
  {
    void SendMessage(global::ClosetRpc.IServerContext context, Message value);

    MessageList GetPendingMessages(global::ClosetRpc.IServerContext context);
  }

  #endregion

  #region Stub classes

  public abstract class LoginService_StubBase : global::ClosetRpc.IRpcService
  {
    public string Name
    {
      get
      {
        return "nano_messanger.LoginService";
      }
    }

    protected abstract LoginServiceInterface Impl { get; }

    public void CallMethod(global::ClosetRpc.IServerContext context, global::ClosetRpc.IRpcCall rpcCall, global::ClosetRpc.IRpcResult rpcResult)
    {
      rpcResult.Status = global::ClosetRpc.RpcStatus.Succeeded;

      if (rpcCall.MethodName == "Register")
      {
        var input = new RegistrationData();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        var result = this.Impl.Register(context, input);
        rpcResult.ResultData = result.ToByteArray();
      }
      else if (rpcCall.MethodName == "Login")
      {
        var input = new AuthenticationData();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        var result = this.Impl.Login(context, input);
        rpcResult.ResultData = result.ToByteArray();
      }
      else if (rpcCall.MethodName == "Logout")
      {
        var result = this.Impl.Logout(context);
        rpcResult.ResultData = result.ToByteArray();
      }
      else if (rpcCall.MethodName == "ChangeAuthenticationInfo")
      {
        var input = new RegistrationData();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        var result = this.Impl.ChangeAuthenticationInfo(context, input);
        rpcResult.ResultData = result.ToByteArray();
      }
      else if (rpcCall.MethodName == "Reconnect")
      {
        var input = new StringValue();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        var result = this.Impl.Reconnect(context, input);
        rpcResult.ResultData = result.ToByteArray();
      }
      else
      {
        rpcResult.Status = global::ClosetRpc.RpcStatus.UnknownMethod;
      }

      // TODO: Generate an exception handling code.
    }
  }

  public class LoginService_Stub : LoginService_StubBase
  {
    private readonly LoginServiceInterface impl;

    public LoginService_Stub(LoginServiceInterface impl)
    {
      this.impl = impl;
    }

    protected override LoginServiceInterface Impl
    {
      get
      {
        return this.impl;
      }
    }
  }

  public abstract class LoginService_ServiceBase : LoginService_StubBase, LoginServiceInterface
  {
    protected override LoginServiceInterface Impl
    {
      get
      {
        return this;
      }
    }

    public abstract BoolValue Register(global::ClosetRpc.IServerContext context, RegistrationData value);

    public abstract SessionInfo Login(global::ClosetRpc.IServerContext context, AuthenticationData value);

    public abstract BoolValue Logout(global::ClosetRpc.IServerContext context);

    public abstract BoolValue ChangeAuthenticationInfo(global::ClosetRpc.IServerContext context, RegistrationData value);

    public abstract BoolValue Reconnect(global::ClosetRpc.IServerContext context, StringValue value);
  }

  public abstract class ContactListService_StubBase : global::ClosetRpc.IRpcService
  {
    public string Name
    {
      get
      {
        return "nano_messanger.ContactListService";
      }
    }

    protected abstract ContactListServiceInterface Impl { get; }

    public void CallMethod(global::ClosetRpc.IServerContext context, global::ClosetRpc.IRpcCall rpcCall, global::ClosetRpc.IRpcResult rpcResult)
    {
      rpcResult.Status = global::ClosetRpc.RpcStatus.Succeeded;

      if (rpcCall.MethodName == "SearchContact")
      {
        var input = new StringValue();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        var result = this.Impl.SearchContact(context, input);
        rpcResult.ResultData = result.ToByteArray();
      }
      else if (rpcCall.MethodName == "AddContact")
      {
        var input = new ContactInfo();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        this.Impl.AddContact(context, input);
      }
      else if (rpcCall.MethodName == "RemoveContact")
      {
        var input = new StringValue();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        this.Impl.RemoveContact(context, input);
      }
      else if (rpcCall.MethodName == "GetContacts")
      {
        var result = this.Impl.GetContacts(context);
        rpcResult.ResultData = result.ToByteArray();
      }
      else
      {
        rpcResult.Status = global::ClosetRpc.RpcStatus.UnknownMethod;
      }

      // TODO: Generate an exception handling code.
    }
  }

  public class ContactListService_Stub : ContactListService_StubBase
  {
    private readonly ContactListServiceInterface impl;

    public ContactListService_Stub(ContactListServiceInterface impl)
    {
      this.impl = impl;
    }

    protected override ContactListServiceInterface Impl
    {
      get
      {
        return this.impl;
      }
    }
  }

  public abstract class ContactListService_ServiceBase : ContactListService_StubBase, ContactListServiceInterface
  {
    protected override ContactListServiceInterface Impl
    {
      get
      {
        return this;
      }
    }

    public abstract ContactList SearchContact(global::ClosetRpc.IServerContext context, StringValue value);

    public abstract void AddContact(global::ClosetRpc.IServerContext context, ContactInfo value);

    public abstract void RemoveContact(global::ClosetRpc.IServerContext context, StringValue value);

    public abstract ContactInfo GetContacts(global::ClosetRpc.IServerContext context);
  }

  public abstract class MessengerService_StubBase : global::ClosetRpc.IRpcService
  {
    public string Name
    {
      get
      {
        return "nano_messanger.MessengerService";
      }
    }

    protected abstract MessengerServiceInterface Impl { get; }

    public void CallMethod(global::ClosetRpc.IServerContext context, global::ClosetRpc.IRpcCall rpcCall, global::ClosetRpc.IRpcResult rpcResult)
    {
      rpcResult.Status = global::ClosetRpc.RpcStatus.Succeeded;

      if (rpcCall.MethodName == "SendMessage")
      {
        var input = new Message();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        this.Impl.SendMessage(context, input);
      }
      else if (rpcCall.MethodName == "GetPendingMessages")
      {
        var result = this.Impl.GetPendingMessages(context);
        rpcResult.ResultData = result.ToByteArray();
      }
      else
      {
        rpcResult.Status = global::ClosetRpc.RpcStatus.UnknownMethod;
      }

      // TODO: Generate an exception handling code.
    }
  }

  public class MessengerService_Stub : MessengerService_StubBase
  {
    private readonly MessengerServiceInterface impl;

    public MessengerService_Stub(MessengerServiceInterface impl)
    {
      this.impl = impl;
    }

    protected override MessengerServiceInterface Impl
    {
      get
      {
        return this.impl;
      }
    }
  }

  public abstract class MessengerService_ServiceBase : MessengerService_StubBase, MessengerServiceInterface
  {
    protected override MessengerServiceInterface Impl
    {
      get
      {
        return this;
      }
    }

    public abstract void SendMessage(global::ClosetRpc.IServerContext context, Message value);

    public abstract MessageList GetPendingMessages(global::ClosetRpc.IServerContext context);
  }

  #endregion

  #region Proxy classes

  public class LoginService_Proxy
  {
    private static readonly string ServiceName = "nano_messanger.LoginService";

    private readonly global::ClosetRpc.RpcClient client;

    public LoginService_Proxy(global::ClosetRpc.RpcClient client)
    {
      this.client = client;
    }

    public BoolValue Register(RegistrationData value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = LoginService_Proxy.ServiceName;
      call.MethodName = "Register";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new BoolValue();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }

    public SessionInfo Login(AuthenticationData value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = LoginService_Proxy.ServiceName;
      call.MethodName = "Login";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new SessionInfo();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }

    public BoolValue Logout()
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = LoginService_Proxy.ServiceName;
      call.MethodName = "Logout";
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new BoolValue();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }

    public BoolValue ChangeAuthenticationInfo(RegistrationData value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = LoginService_Proxy.ServiceName;
      call.MethodName = "ChangeAuthenticationInfo";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new BoolValue();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }

    public BoolValue Reconnect(StringValue value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = LoginService_Proxy.ServiceName;
      call.MethodName = "Reconnect";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new BoolValue();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }
  }

  public class ContactListService_Proxy
  {
    private static readonly string ServiceName = "nano_messanger.ContactListService";

    private readonly global::ClosetRpc.RpcClient client;

    public ContactListService_Proxy(global::ClosetRpc.RpcClient client)
    {
      this.client = client;
    }

    public ContactList SearchContact(StringValue value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = ContactListService_Proxy.ServiceName;
      call.MethodName = "SearchContact";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new ContactList();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }

    public void AddContact(ContactInfo value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = ContactListService_Proxy.ServiceName;
      call.MethodName = "AddContact";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }
    }

    public void RemoveContact(StringValue value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = ContactListService_Proxy.ServiceName;
      call.MethodName = "RemoveContact";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }
    }

    public ContactInfo GetContacts()
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = ContactListService_Proxy.ServiceName;
      call.MethodName = "GetContacts";
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new ContactInfo();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }
  }

  public class MessengerService_Proxy
  {
    private static readonly string ServiceName = "nano_messanger.MessengerService";

    private readonly global::ClosetRpc.RpcClient client;

    public MessengerService_Proxy(global::ClosetRpc.RpcClient client)
    {
      this.client = client;
    }

    public void SendMessage(Message value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = MessengerService_Proxy.ServiceName;
      call.MethodName = "SendMessage";
      call.CallData = value.ToByteArray();
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }
    }

    public MessageList GetPendingMessages()
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = MessengerService_Proxy.ServiceName;
      call.MethodName = "GetPendingMessages";
      var result = this.client.CallService(call);
      if (result.Status != global::ClosetRpc.RpcStatus.Succeeded)
      {
        throw new Exception(); // TODO: Be more specific
      }

      var returnValue = new MessageList();
      returnValue.MergeFrom(result.ResultData);
      return returnValue;
    }
  }

  #endregion

  #region Event proxy classes

  public class SessionEvents_EventProxy
  {
    private static readonly string ServiceName = "nano_messanger.SessionEvents";

    public void SessionExpired(global::ClosetRpc.IEventSource eventSource)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = SessionEvents_EventProxy.ServiceName;
      call.MethodName = "SessionExpired";
      call.IsAsync = true;
      eventSource.SendEvent(call);
    }
  }

  public class MessengerEvents_EventProxy
  {
    private static readonly string ServiceName = "nano_messanger.MessengerEvents";

    public void NewMessage(global::ClosetRpc.IEventSource eventSource)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = MessengerEvents_EventProxy.ServiceName;
      call.MethodName = "NewMessage";
      call.IsAsync = true;
      eventSource.SendEvent(call);
    }

    public void OnlineStatusChanged(global::ClosetRpc.IEventSource eventSource, ContactInfo value)
    {
      var call = new global::ClosetRpc.RpcCallParameters();
      call.ServiceName = MessengerEvents_EventProxy.ServiceName;
      call.MethodName = "OnlineStatusChanged";
      call.IsAsync = true;
      call.CallData = value.ToByteArray();
      eventSource.SendEvent(call);
    }
  }

  #endregion

  #region Event stub classes

  public interface SessionEventsEventInterface
  {
    void OnSessionExpired();
  }

  public abstract class SessionEvents_EventStubBase : global::ClosetRpc.IEventHandler
  {
    public string Name
    {
      get
      {
        return "nano_messanger.SessionEvents";
      }
    }

    protected abstract SessionEventsEventInterface Impl { get; }

    public void CallMethod(global::ClosetRpc.IRpcCall rpcCall)
    {
      if (rpcCall.MethodName == "SessionExpired")
      {
        this.Impl.OnSessionExpired();
      }
      else
      {
        // TODO: Generate diagnostics?.
      }
    }
  }

  public class SessionEvents_EventStub : SessionEvents_EventStubBase
  {
    private readonly SessionEventsEventInterface impl;

    public SessionEvents_EventStub(SessionEventsEventInterface impl)
    {
      this.impl = impl;
    }

    protected override SessionEventsEventInterface Impl
    {
      get
      {
        return this.impl;
      }
    }
  }

  public abstract class SessionEvents_Listener : SessionEvents_EventStubBase, SessionEventsEventInterface
  {
    protected override SessionEventsEventInterface Impl
    {
      get
      {
        return this;
      }
    }

    public abstract void OnSessionExpired();
  }

  public class SessionEvents_Handler : SessionEvents_EventStubBase
  {
    private readonly SessionEventsEventInterface impl;

    public SessionEvents_Handler()
    {
      this.impl = new EventInterfaceImpl(this);
    }

    public event EventHandler SessionExpired;

    protected override SessionEventsEventInterface Impl
    {
      get
      {
        return this.impl;
      }
    }

    private class EventInterfaceImpl : SessionEventsEventInterface
    {
      private readonly SessionEvents_Handler outer;

      public EventInterfaceImpl(SessionEvents_Handler outer)
      {
        this.outer = outer;
      }

      public void OnSessionExpired()
      {
        var handler = this.outer.SessionExpired;
        if (handler != null)
        {
          handler(this, EventArgs.Empty);
        }
      }
    }
  }

  public interface MessengerEventsEventInterface
  {
    void OnNewMessage();

    void OnOnlineStatusChanged(ContactInfo value);
  }

  public abstract class MessengerEvents_EventStubBase : global::ClosetRpc.IEventHandler
  {
    public string Name
    {
      get
      {
        return "nano_messanger.MessengerEvents";
      }
    }

    protected abstract MessengerEventsEventInterface Impl { get; }

    public void CallMethod(global::ClosetRpc.IRpcCall rpcCall)
    {
      if (rpcCall.MethodName == "NewMessage")
      {
        this.Impl.OnNewMessage();
      }
      else if (rpcCall.MethodName == "OnlineStatusChanged")
      {
        var input = new ContactInfo();
        input.MergeFrom(new CodedInputStream(rpcCall.CallData));
        this.Impl.OnOnlineStatusChanged(input);
      }
      else
      {
        // TODO: Generate diagnostics?.
      }
    }
  }

  public class MessengerEvents_EventStub : MessengerEvents_EventStubBase
  {
    private readonly MessengerEventsEventInterface impl;

    public MessengerEvents_EventStub(MessengerEventsEventInterface impl)
    {
      this.impl = impl;
    }

    protected override MessengerEventsEventInterface Impl
    {
      get
      {
        return this.impl;
      }
    }
  }

  public abstract class MessengerEvents_Listener : MessengerEvents_EventStubBase, MessengerEventsEventInterface
  {
    protected override MessengerEventsEventInterface Impl
    {
      get
      {
        return this;
      }
    }

    public abstract void OnNewMessage();

    public abstract void OnOnlineStatusChanged(ContactInfo value);
  }

  public class MessengerEvents_Handler : MessengerEvents_EventStubBase
  {
    private readonly MessengerEventsEventInterface impl;

    public MessengerEvents_Handler()
    {
      this.impl = new EventInterfaceImpl(this);
    }

    public event EventHandler NewMessage;

    public event EventHandler<ContactInfo> OnlineStatusChanged;

    protected override MessengerEventsEventInterface Impl
    {
      get
      {
        return this.impl;
      }
    }

    private class EventInterfaceImpl : MessengerEventsEventInterface
    {
      private readonly MessengerEvents_Handler outer;

      public EventInterfaceImpl(MessengerEvents_Handler outer)
      {
        this.outer = outer;
      }

      public void OnNewMessage()
      {
        var handler = this.outer.NewMessage;
        if (handler != null)
        {
          handler(this, EventArgs.Empty);
        }
      }


      public void OnOnlineStatusChanged(ContactInfo value)
      {
        var handler = this.outer.OnlineStatusChanged;
        if (handler != null)
        {
          handler(this, value);
        }
      }
    }
  }

  #endregion
}
